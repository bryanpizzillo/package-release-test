name: Workflow
on: [push, pull_request]
jobs:
  build:
    name: Build, Test and Upload Artifacts
    runs-on: ubuntu-latest
    steps:
      ## Setup variables for build info
      - name: Set Variables
        id: set_vars
        run: |
          ## PUSH
          if [ "${{ github.event_name }}" == "push" ]; then
            BUILD_NAME=$(sed -E 's/refs\/(heads|tags)\///; s/\//__/g;' <<< $GITHUB_REF)
            BRANCH_NAME=$(sed -E 's/refs\/(heads|tags)\///;' <<< $GITHUB_REF)
            COMMIT_HASH=$(echo "${GITHUB_SHA}")
          ## PULL_REQUEST
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            BUILD_NAME=$(echo "pr-${{ github.event.pull_request.number }}")
            BRANCH_NAME=$(echo "pr-${{ github.event.pull_request.number }}")
            COMMIT_HASH=$(echo "${{ github.event.pull_request.head.sha }}")
          else
            ## ERROR
            exit 1
          fi

          ## For step checks and artifact deployment path.
          ## Same for push and PR
          export REPO_FULL=${{ github.repository }}
          export REPO_RE='([^/]+)/(.*)'
          [[ "$REPO_FULL" =~ $REPO_RE ]]
          REPO_OWNER=$(echo "${BASH_REMATCH[1]}")
          REPO_NAME=$(echo "${BASH_REMATCH[2]}")

          ## Set step outputs for later use
          echo ::set-output name=build_name::${BUILD_NAME}
          echo ::set-output name=branch_name::${BRANCH_NAME}
          echo ::set-output name=commit_hash::${COMMIT_HASH}
          echo ::set-output name=repo_owner::${REPO_OWNER}
          echo ::set-output name=repo_name::${REPO_NAME}
      ## This clones and checks out.
      - name: Checkout branch
        uses: actions/checkout@v1
      ## Generate build-info.json to house information
      ## about this specific build. Used for product test
      ## deployment
      - name: Create Build Information
        env:
          BUILD_INFO: ${{ toJson(steps.set_vars.outputs) }}
        run: |
          mkdir build
          echo $BUILD_INFO
          echo $BUILD_INFO > ./build/build-info.json
      ## Upload the test results artifact
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact
          path: build
      - name: Log
        run: |
          echo ${{ github.repository }}
          echo ${{ github.event_name }}
          echo ${{ github.ref }}
          echo ${{ github.event.before }}
  release:
    name: Create a Github release and deploy to prod NS
    ## Only run this job when it is the push to main (backwards compat with master)
    if: |
      startsWith(github.repository, 'bryanpizzillo') &&
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download built app
        uses: actions/download-artifact@v1
        with:
          name: build-artifact
      ## Setup vars from Build Info from build job
      - name: Setup Job env
        run: |
          ## Set Vars
          BUILD_NAME=$(jq -r '.build_name' < ./build-artifact/build-info.json)
          BRANCH_NAME=$(jq -r '.branch_name' < ./build-artifact/build-info.json)
          COMMIT_HASH=$(jq -r '.commit_hash' < ./build-artifact/build-info.json)
          REPO_OWNER=$(jq -r '.repo_owner' < ./build-artifact/build-info.json)
          REPO_NAME=$(jq -r '.repo_name' < ./build-artifact/build-info.json)

          ## Set Action Env
          echo "BUILD_NAME=${BUILD_NAME}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV
          echo "REPO_OWNER=${REPO_OWNER}" >> $GITHUB_ENV
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV

          ######## ERROR IF PR FROM FORK
          if [ "$REPO_OWNER" != "bryanpizzillo" ]; then
            echo "YOU SHOULD NOT SEND PR FROM FORK!!!"
            exit 1
          fi
      ## COPY THIS
      - name: Checkout previous version
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.before }}
          path: old-version
      ## COPY THIS
      - name: Checkout New version
        uses: actions/checkout@v2
        with:
          path: new-version
      ## COPY THIS
      - name: Set Package Versions
        id: versions
        run: |
          ls -l
          NEW_VERSION=$(jq -r '.version' < ./new-version/package.json)
          OLD_VERSION=$(jq -r '.version' < ./old-version/package.json)
          echo ::set-output name=new_version::${NEW_VERSION}
          echo ::set-output name=old_version::${OLD_VERSION}
      - uses: octokit/graphql-action@v2.2.20
        id: get_latest_release
        with:
          query: |
            query release($owner:String!,$repo:String!) {
              repository(owner:$owner,name:$repo) {
                releases(first:1) {
                  nodes {
                    name
                    createdAt
                    tagName
                    description
                  }
                }
              }
            }
          owner: ${{ github.event.repository.owner.name }}
          repo: ${{ github.event.repository.name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test
        env:
          FOO: ${{ env.GITHUB_EVENT_PATH }}
        run: |
          printenv
